name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  REGISTRY_URL: "${{ secrets.REGISTRY_URL }}"
  NAME_SPACE: "${{ secrets.NAME_SPACE }}"
  REGISTRY_USER: "${{ secrets.REGISTRY_USER }}"
  REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: |
        sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image harbor
      run: |
        docker login -u $REGISTRY_USER -p $REGISTRY_PASSWORD $REGISTRY_URL 
        # 数据预处理,判断镜像是否重名
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo "$line" | awk '{print $NF}')
            # 将@sha256:等字符删除
            image="${image%%@*}"
            echo "image $image"
         done < images.txt
                
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            echo "docker pull $line"
            docker pull $line
            # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
            image=$(echo " 镜像的完整名称  $line" | awk '{print $NF}')
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag=$(echo "镜像名:版本号 $image" | awk -F'/' '{print $NF}')
            # 获取命名空间 例如kasmweb  这里有种特殊情况 docker.io/nginx，把docker.io当成命名空间，也OK
            name_space=$(echo " 种特殊情况  $image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            # 获取镜像名例  例如nginx
            image_name=$(echo " 镜像名例  $image_name_tag" | awk -F':' '{print $1}')
            # 将@sha256:等字符删除
            image_name_tag="${image_name_tag%%@*}"
            #new_image="$REGISTRY_URL/$NAME_SPACE/$platform_prefix$name_space_prefix$image_name_tag"
            new_image="harbor.baiinfo.com:20061/bigdata/$name_space_prefix$image_name_tag"
            #ping harbor.baiinfo.com
            echo "docker tag sssssssssssssssssssss"
            #docker tag $REGISTRY_URL/$NAME_SPACE/$name_space_prefix$image_name_tag
            docker tag $image_name_tag harbor.baiinfo.com:20061/bigdata/$image_name_tag
            #docker tag $image_name_tag harbor.baiinfo.com:20061/bigdata/$image_name_tag
            docker tag $image_name_tag harbor.baiinfo.com:20061/bigdata/$image_name_tag
            echo "docker push oooooooooooooooooooooo"
            #docker push $new_image
            docker push harbor.baiinfo.com:20061/bigdata/$image_name_tag
            #docker push harbor.baiinfo.com:20061/bigdata/$image_name_tag
            docker push harbor.baiinfo.com:20061/bigdata/$image_name_tag
            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            docker rmi $image
            docker rmi $new_image
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="     
            
        done < images.txt
